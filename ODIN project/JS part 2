Finding solutions to problems-------
Rewrite it in plain english, write a diagram. Given your inputs, what steps do you need to take to get the output you want. 
Pseudo code is the steps you plan to take in plain english.
Does it need an inerphase, where does the input come from,
solve easy things first, then subproblems, problems that don't rely on solving any other problem.
input implies that some question was given. And a way to capture the answer.
------OBJECTS
For objects constructors, the name of the function is called back with the word this.(var) found in the () after the name of the function.
by doing let X = new String("pizza") we are making the word pizza into an object. 
This is a way to add things into the function, the use of prototype. 
function Person(first, last, age, eyecolor) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eyecolor;
}
Fruit.prototype = new Plant ();
// Creates a new object, aBanana, with the Fruit constructor
var aBanana = new Fruit ("Banana", "Yellow");

// Here, aBanana uses the name property from the aBanana object prototype, which is Fruit.prototype:
console.log(aBanana.name); // Banana

// Uses the showNameAndColor method from the Fruit object prototype, which is Plant.prototype. The aBanana object inherits all the properties and methods from both the Plant and Fruit functions.
console.log(aBanana.showNameAndColor()); // I am a Banana and my color is yellow.
when useing new Fruit for example (banna,yellow)
we can use the orginal 
Person.prototype.nationality = "English";


function People () {
this.superstar = "Michael Jackson";
}
// Define "athlete" property on the People prototype so that "athlete" is accessible by all objects that use the People () constructor.
People.prototype.athlete = "Tiger Woods";

var famousPerson = new People ();
famousPerson.superstar = "Steve Jobs";
using new is like saying this new stuff can use the stuff before.
let animal = {
  eats: true,
  walk() {
    alert("Animal walk");
  }
};

let rabbit = {
  jumps: true,
  __proto__: animal
};

let longEar = {
  earLength: 10,
  __proto__: rabbit
};

// walk is taken from the prototype chain
longEar.walk(); // Animal walk
alert(longEar.jumps); // true (from rabbit)

function Student() {
}

Student.prototype.sayName = function() {
  console.log(this.name)
}

function EighthGrader(name) {
  this.name = name
  this.grade = 8
}

EighthGrader.prototype = Object.create(Student.prototype)

const carl = new EighthGrader("carl")
carl.sayName() // console.logs "carl"
carl.grade // 8
