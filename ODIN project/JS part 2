Finding solutions to problems-------
Rewrite it in plain english, write a diagram. Given your inputs, what steps do you need to take to get the output you want. 
Pseudo code is the steps you plan to take in plain english.
Does it need an inerphase, where does the input come from,
solve easy things first, then subproblems, problems that don't rely on solving any other problem.
input implies that some question was given. And a way to capture the answer.
------OBJECTS
For objects constructors, the name of the function is called back with the word this.(var) found in the () after the name of the function.
by doing let X = new String("pizza") we are making the word pizza into an object. 
This is a way to add things into the function, the use of prototype. 
function Person(first, last, age, eyecolor) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eyecolor;
}
Fruit.prototype = new Plant ();
// Creates a new object, aBanana, with the Fruit constructor
var aBanana = new Fruit ("Banana", "Yellow");

// Here, aBanana uses the name property from the aBanana object prototype, which is Fruit.prototype:
console.log(aBanana.name); // Banana

// Uses the showNameAndColor method from the Fruit object prototype, which is Plant.prototype. The aBanana object inherits all the properties and methods from both the Plant and Fruit functions.
console.log(aBanana.showNameAndColor()); // I am a Banana and my color is yellow.
when useing new Fruit for example (banna,yellow)
we can use the orginal 
Person.prototype.nationality = "English";


function People () {
this.superstar = "Michael Jackson";
}
// Define "athlete" property on the People prototype so that "athlete" is accessible by all objects that use the People () constructor.
People.prototype.athlete = "Tiger Woods";
successfully can add variables by pushing with three arrays, is it possible with only one array, one constructor, then a proto.

var famousPerson = new People ();
famousPerson.superstar = "Steve Jobs";
using new is like saying this new stuff can use the stuff before.
let animal = {
  eats: true,
  walk() {
    alert("Animal walk");
  }
};

let rabbit = {
  jumps: true,
  __proto__: animal
};

let longEar = {
  earLength: 10,
  __proto__: rabbit
};

// walk is taken from the prototype chain
longEar.walk(); // Animal walk
alert(longEar.jumps); // true (from rabbit)

function Student() {
}

Student.prototype.sayName = function() {
  console.log(this.name)
}

function EighthGrader(name) {
  this.name = name
  this.grade = 8
}

EighthGrader.prototype = Object.create(Student.prototype)

const carl = new EighthGrader("carl")
carl.sayName() // console.logs "carl"
carl.grade // 8

---------------------Youtube
function Apple(X,Y,Color){
this.x = x
this.y = y
this.color = color
}
let apple1 = new Apple(10,20,"green")
new Apple is needed, then you just add variables that will be added to the apple constructor above. 
prototypes are shared objects. 
apple1 color:red; weight: 33;
apple2 color green weidth 12
apple.prototype = {
eat(),
throw()
}
color and wight are unqie, but eat and throw is not, so it's proto
if we have return this on the eat( return this)
we will not get Apple, but rather apple1 if we decide to do apple1.eat(). Up the chain.

-----In practice prototype
Constructor has all the variables set to itself this.name when a variable is name
function Name(name){}

let whatEverYouWantToNameIt = new Name("peter")
whatEverYouWantToNameIt.name will make the word "peter" appear

need a way to add proto onto the page, probably when I add the evenlLister on the click, if not, I can solve this with array, adding images will be interesting
while making the page stand out compare to others.
--------Why aren't constructors good?
They look like functions but don't act them.
------------------
This is an example of a factory function 

const personFactory = (name, age) => {
  const sayHello = () => console.log('hello!');
  return { name, age, sayHello };
};

const jeff = personFactory('jeff', 27);

console.log(jeff.name); // 'jeff'

jeff.sayHello(); // calls the function and logs 'hello!'v

----------------  vs the example with constructor
const Person = function(name, age) {
  this.sayHello = () => console.log('hello!');
  this.name = name;
  this.age = age;
};
the function factory is like you make a function with the gaps; but then you decide what to put into it with a variable outside the function.
const jeff = new Person('jeff', 27);v

scope-------
context means this
scope means variablce access
if function doesn't have the let, it will look through the gloabl variables if they are the same and replace it, not wanted. 
Calling a variable from a function in a function is called a lexical scope.

if we want a function inside a function to work, we need to return that function, if not, if we just return the fourth internal function, that fourth one has closure
meanning it has access to all the other internal function variables, another example will be to set a function to a varible
the main idea is that we assign the big overehading variable with the variables it needs, then we can access the other functions but using the variable for the big function
.function inside function name(vaibles it wants filled)
const Player = (name, level) => {
  let health = level * 2;
  const getLevel = () => level;
  const getName  = () => name;
  const die = () => {
    // uh oh
  };
  const damage = x => {
    health -= x;
    if (health <= 0) {
      die();
    }
  };
  const attack = enemy => {
    if (level < enemy.getLevel()) {
      damage(1);
      console.log(`${enemy.getName()} has damaged ${name}`);
    }
    if (level >= enemy.getLevel()) {
      enemy.damage(1);
      console.log(`${name} has damaged ${enemy.getName()}`);
    }
  };
  return {attack, damage, getLevel, getName}
};

const jimmie = Player('jim', 10);
const badGuy = Player('jeff', 5);
jimmie.attack(badGuy);
const counterCreator = () => {
  let count = 0;
  return () => {
    console.log(count);
    count++;
  };
};

const counter = counterCreator();

counter(); // 0
counter(); // 1
counter(); // 2
counter(); // 3

--------Modular
Creating a function that we want private; and where the function has no name; we can end
the function with a set of (); and this will make it private.
const calculator = (() => {
  const add = (a, b) => a + b;
  const sub = (a, b) => a - b;
  const mul = (a, b) => a * b;
  const div = (a, b) => a / b;
  return {
    add,
    sub,
    mul,
    div,
  };
})();

calculator.add(3,5) // 8
calculator.sub(6,2) // 4
calculator.mul(14,5534) // 77476
