when using the + symbol, anything right of a string will cause all things to be treated as a string right of the "". And anything attached to it. 
this only applies to the + symbol.
0xFF will be like 16 * 16, like the colors ff00ff. 
strings are words
numbers are numbers
objects name:value pair. 
Objects can be created with new name(value), but slows down the process, do avoid. 
type of variable, to see what type it is.
Number(variable) to turn a string into a number
or, parse int, or even better, just add a +variable and that works the same as Number(variable)
++ var vs var++, var++ uses the old value and needs to be called again to see the new one, ++var gives you the new one straight up.
----------STRINGS
null means simply value is not there, we give that to a variable to say we don't know. 
We learned Number(var) makes a string into a number, to make a number into a string we do var.toString().
indexOf("word") finds the first place it can be seen, .length returns the length., .search(words)[cannot take position] works the same as indexOf(word,15).
for slice, we need to set it to another var. Best to treat all of them this way. 
replace(word want to be replace, word going to be added)./same words wanted to be replace /g
-------------CONDITIONALS
IF statements make a condition if true run somethng, ELSE is done if it's false, ELSE IF is when IF is false, but meets another condition.
&& returns the first false, while || returns the first truth. ! makes booleans oppsite values, while !! makes thing into booleans. 

Example of DOM and switch statement

const select = document.querySelector('select');
const para = document.querySelector('p');

select.addEventListener('change', setWeather); ("change will be the value, setWeather is the function)


function setWeather() {
  const choice = select.value;

  switch (choice) {
    case 'sunny':
      para.textContent = 'It is nice and sunny outside today. Wear shorts! Go to the beach, or the park, and get an ice cream.';
      break;
    case 'rainy':
      para.textContent = 'Rain is falling outside; take a rain coat and an umbrella, and don\'t stay out for too long.';
      break;
    case 'snowing':
      para.textContent = 'The snow is coming down â€” it is freezing! Best to stay in with a cup of hot chocolate, or go build a snowman.';
      break;
    case 'overcast':
      para.textContent = 'It isn\'t raining, but the sky is grey and gloomy; it could turn any minute, so take a rain coat just in case.';
      break;
    default:
      para.textContent = '';
  }
}

-----------ISSUES WITH UNDEFINED

let number = prompt('what is your favorite number')


if (number == 42) {response ="Yay! That's my favorite too!"
}
else if( number < 42 )
  {
    response= "Eh, that's OK but " + `${+number + 1}` + " would be even better"
  }
else if (number > 42){
    response = "LAME. That number is too large!"
}
Functions-------------------------
A function doesn't need a name if it's turns on by an event, such as a button being clicked on.
we can use two ways to make sure if nothing is given a word comes out, one is variable === undefined, varibale = "no text given"
or alert(variablle ?? "No text given")
most function names start with a verb
expressions have the let = function, declarations have just the function name () {}
--------Writing Clean Code-----------
Important to write code so that you don't need to write any comments. Write as if comments don't exisit. 
Comments are best when we are describing why we are doing something. 
--------Arrays-----------------
Array.isArray(nameofarray) = simimlar to typeOf.
if assigned, pop will give the variable the value of what was popped, while push will give you the new length count. 
splice since it is not used in the[] form, think of 1 as [0]
slice makes a new array, so it needs its own variable, since it doesn't effect the orginal array, slice may seem better. 
slice always slice left of that number it lands, treat these are [0]
.split removes a key thing, like "," or ":"
.toLowerCase makes keys insensitive. 
-------LOOPS--------------
continue skips the round of output if true, while break stops the whole thing. these are usually done with Ifs inside the for/while
-----Objects------------
objects can be created
let user = {name:"john", age: 15}

user.name will call John
user.friend = "paul"
this will add a name of friend with value of "paul"
delete user.friend will remove the name and value
quatations are used to add multi word thing
user{"likes birds": no}
for quatation words, user["likes Birds] = No, will work instead of user.likes Birds
Works with prompts as well, since prompts are words.
so let words = prompt(what do you want to know?) 
user[words] = "friend", the word word Paul will come out.
to test if something is inside or not, we can run alert("name" in user), called the IN. 
Use of FOR and INS, when used as user[key], will give us all the values. 
for (key in object) {
  // executes the body for each key among object properties
}
let user = {
  name: "John",
  age: 30,
  isAdmin: true
};

for (let key in user) {
  // keys
  alert( key );  // name, age, isAdmin
  // values for the keys
  alert( user[key] ); // John, 30, true
}
A way to add up all salaries of everyone.
let salaries = {
  John: 100,
  Ann: 160,
  Pete: 130
};

let sum = 0;
for (let key in salaries) {
  sum += salaries[key];
}

alert(sum); // 390
name.last is the same as name[last]
however note that [] can only work with array variables.
name: john
"hello" + this.name , hello John
----ARRRAY YOUTUBE VIDEO
array.filter. We pass a function into it.
let filter = thing.filter(function(inventor){
if statemt to return true})
console.table
array.map always returns the same amount as you give it. here there is no if since the whole array will be looked through, return first and last name,
still need to make the function statement (can make it shoter by erasing the function just saying invetor =>
person.first + person.last
sort get two things and give it the value of 1 and -1, also uses If statements.
ordered = inventors.sort(function(a,b){
if(a.yaer > b.year) {
return a} else{
return -1})
array.reduce like a for loop. Kinda.
let totalyears = inventors.reduce(function(total,inventor) {
return total + (inventor.passed - inventor.year);
}, 0);
if you're getting a weird number, the total is used by the stored value of previous values. so 0 will fix it.
}
if a message pop up about Nodelist, it measn you must make it into an array. Array.from(category.qureySelectorAll('a'))
run the map to get the array.then run the filter. streetname.Included('de'))
transportation = data.reduce(function(obj,item){
if (!obj[item])onj[item] = 0;} obj[item]++;return obj
filter, if statement that returns true. Coffee is true, filter out the beans. 
map is like you see all of a certain thing, a MAP on food only vs a MAP of the city, both are in a state, but we only want a map of certain things.
sort uses -1 and 1, it's the order, when you sort out an order, you are seeing which takes priorty. 
reduce takes in two variables like sort, but reduce outputs only one value. 
 the variable in the function can use all the .properties .firstName + .lastName,
when you go on a page and are working on the dom. let a  = document.QuerySelector
let test = Array.from(a.querySelectorAll('a'))
let bigT = test.map(link => link.textContent)
quereySelectorAll returns a node list, we need an array. Array.from makes it into an array. or you can Do[...a.queAll('a')]
we can just move test.map down a line and contine with .sort(streetname => streetname.includes('de')).
Harder first + lastname
let alpha = people.sort(function(lastOne, firstOne) {
let [aLast,aFirst] = lastOne.split(", ")
let [bLast,bFirst] = nextOne.split(", ")
return aLast > bLast? 1:-1});
console.log(alpha)
HARDER
let transportation = data.reduce(function(obj,item){
if(!obj[item]){
obj[item] = 0;}
obj[item]++; return obj;} {});
.some function
A cool way to get current year 
let adult = people.some(function(){
let currentYear = (new Date ()).getFullYear();
if(currentYear = person.year >= 19){
return true;}});
console.log({adult}) to get the variable that matches that one time true statement.
.every works if all are true, and .find finds a specific one, typically if === "something you want" 
.findIndex is set up like .find, but returns to us the position, important for when we want to to remove it from the array or add something to it
for index = 1, to remove.
comments.splice(index,1)
